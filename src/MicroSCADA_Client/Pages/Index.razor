@page "/"

<MudMainContent>    
    <PageTitle>Index</PageTitle>
    <MudText Typo="Typo.h3" GutterBottom="true">Hello, world!</MudText>
    <MudText Class="mb-8">Welcome to your new app, powered by MudBlazor!</MudText>
        
    <MudGrid>
        <MudItem xs="8">        
            <MudPaper Class="d-flex align-left py-8">
                <MudTreeView ServerData="LoadServerData" Items="TreeItems" MultiSelection="true" @bind-SelectedValues="SelectedTags">
                    <ItemTemplate>
                        <MudTreeViewItem Value="@context" Icon="@context.Icon" LoadingIconColor="Color.Info"
                                            Text="@context.Title" EndText="@context.Number?.ToString()" EndTextTypo="@Typo.caption" />
                    </ItemTemplate>
                </MudTreeView>
            </MudPaper>
        </MudItem>
        <MudItem xs="4">   
           <MudCard Elevation="25">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Subscription View</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudText @bind-Value="OPCUABrowse.SubcribeList" Label="Tag Value" Variant="Variant.Text" Margin="Margin.Normal"></MudText>
                    <br />
                    <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="TagSubcriptionData">Subcribe</MudButton>
                </MudCardContent>
            </MudCard>
         </MudItem>
         <MudText Style="width: 100%" Typo="Typo.subtitle1"  Class="mb-n2">Number of selected items: @(SelectedTags?.Count ?? 0)</MudText>
    </MudGrid>
</MudMainContent>

@code{
    private HashSet<TreeItemData> TreeItems { get; set; } = new HashSet<TreeItemData>();

    private HashSet<TreeItemData> SelectedTags { get; set; }

    public class TreeItemData
    {
        public string Title { get; set; }

        public string Icon { get; set; }

        public string? Number { get; set; }

        public string? Id { get; set; }

        public bool Subscribeable { get; set; } = false;

        public HashSet<TreeItemData> TreeItems { get; set; }

        public TreeItemData(string title, string icon, string? number = null, string? id = null)
        {
            Title = title;
            Icon = icon;
            Number = number;
            Id = id;
            Subscribeable = (Number != null);
        }
    }

    protected override void OnInitialized()
    {
        TreeItems.Add(new TreeItemData("Test", Icons.Filled.Email));
        TreeItems.Add(new TreeItemData("Trash", Icons.Filled.PrivateConnectivity));
        //TreeItems.Add(new TreeItemData("Categories", Icons.Filled.Label)
        //{
        //    TreeItems = new HashSet<TreeItemData>()
        //    {
        //        new TreeItemData("Social", Icons.Filled.Group, "90.00"),
        //        new TreeItemData("Updates", Icons.Filled.Info, "2294.00"),
        //        new TreeItemData("Forums", Icons.Filled.QuestionAnswer, "3566"),
        //    }
        //});
    }

    public async Task<HashSet<TreeItemData>> LoadServerData(TreeItemData parentNode)
    {
        await Task.Delay(500);
        HashSet<TreeItemData>? childitems = new HashSet<TreeItemData>();

        if (!((parentNode.Title == "Categories") ||  (parentNode.Title == "All Mail")))
        {
            try
            {
                if (!OPCUABrowse.ConnectionEstabilished)
                {
                    OPCUABrowse.Initialize();
                    childitems.Add(new TreeItemData($"Server Browse: {OPCUABrowse.OpcNodes?[1].NodeName}", @Icons.Filled.Computer, OPCUABrowse.OpcNodes?[1].NodeValue, OPCUABrowse.OpcNodes?[1].Id));
                    return childitems;
                }

                OPCUABrowse.HandleNodesTreeViewAfterExpand(parentNode.Id);

                foreach (OPCNodeObject node in OPCUABrowse.OpcNodes)
                {
                    if(node.NodeValue is not null)
                    {
                        childitems.Add(new TreeItemData($"{node.NodeName}", Icons.Filled.LocalOffer, node.NodeValue, node.Id));   
                    }
                    else
                    {
                        childitems.Add(new TreeItemData($"{node.NodeName}", Icons.Filled.Label, node.NodeValue, node.Id));
                    }                   
                }
                return childitems;

            }
            catch (Exception ex) 
            { 
                childitems.Add(new TreeItemData($"Initialization failed: {ex.ToString()}", Icons.Filled.AccessAlarm));
                return childitems;
            }           
        }

        else return parentNode.TreeItems;
    }

    public void TagSubcriptionData()
    {
        List<string> NodeIds = new List<string>();

        foreach(TreeItemData item in SelectedTags)
        {
            NodeIds.Add(item.Id);
        };

        if (!OPCUABrowse.Subcribe(NodeIds)) OPCUABrowse.SubcribeList.Add("Error enocuntered");
    }
}