@page "/"

<MudMainContent>    
    <PageTitle>Index</PageTitle>
    <MudText Typo="Typo.h3" GutterBottom="true">Welcome to MicroSCADA!</MudText>
    <MudText Class="mb-8">Expand the Node to Estabilish Connection to the OPC Server</MudText>
        
    <MudGrid>
        <MudItem xs="6">        
            <MudPaper Class="d-flex align-left py-8">
                <MudTreeView ServerData="LoadServerData" Items="TreeItems" MultiSelection="true" @bind-SelectedValues="SelectedTags">
                    <ItemTemplate>
                        <MudTreeViewItem Value="@context" Icon="@context.Icon" LoadingIconColor="Color.Info"
                                            Text="@context.Title" EndText="@context.Number?.ToString()" EndTextTypo="@Typo.caption" />
                    </ItemTemplate>
                </MudTreeView>
            </MudPaper>
        </MudItem>
        <MudItem xs="6">            
            <MudCard Elevation="25">
                <MudList >
                    @foreach(string item in OPCBrowseClass.SubscribeChanged)
                    {
                        <MudListItem>@item</MudListItem>
                    }                    
                </MudList>
            </MudCard>    
            <MudButton OnClick="TagSubcriptionData" Variant="Variant.Filled" Color="Color.Primary">
                @if (_processing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                    <MudText Class="ms-2">Processing</MudText>
                }
                else
                {
                    <MudText>Click me</MudText>
                }
            </MudButton> 
         </MudItem>
         <MudText Style="width: 100%" Typo="Typo.subtitle1"  Class="mb-n2">Number of selected items: @(SelectedTags?.Count ?? 0)</MudText>
    </MudGrid>
</MudMainContent>

@code{

    private HashSet<TreeItemData> TreeItems {  get; set; } = new HashSet<TreeItemData>();

    private HashSet<TreeItemData> SelectedTags { get; set; } = new HashSet<TreeItemData>();

    public OPCUABrowse OPCBrowseClass = new OPCUABrowse();

    public string tagRelay { get; set; } = "Empty";

    private bool _processing = false;

    public class TreeItemData
    {
        
        public string Title { get; set; }

        public string Icon { get; set; }

        public string? Number { get; set; }

        public string? Id { get; set; }

        public bool Subscribeable { get; set; } = false;

        public HashSet<TreeItemData> TreeItems { get; set; }

        public TreeItemData(string title, string icon, string? number = null, string? id = null)
        {
            Title = title;
            Icon = icon;
            Number = number;
            Id = id;
            Subscribeable = (Number != null);
        }       
    }

    protected override void OnInitialized()
    {
        //TreeItems.Add(new TreeItemData("Test", Icons.Filled.Email));
        TreeItems.Add(new TreeItemData("OPC UA: Local Server", Icons.Filled.PrivateConnectivity));
        OPCUABrowse OPCBrowseClass = new OPCUABrowse();

    }

    public async Task<HashSet<TreeItemData>> LoadServerData(TreeItemData parentNode)
    {
        //await Task.Delay(500);
        HashSet<TreeItemData>? childitems = new HashSet<TreeItemData>();

        if (!((parentNode.Title == "Categories") ||  (parentNode.Title == "All Mail")))
        {
            try
            {
                if (!OPCBrowseClass.ConnectionEstabilished)
                {
                    OPCBrowseClass.Initialize();
                    childitems.Add(new TreeItemData($"Server Browse: {OPCBrowseClass.OpcNodes?[1].NodeName}", @Icons.Filled.Computer, OPCBrowseClass.OpcNodes?[1].NodeValue, OPCBrowseClass.OpcNodes?[1].Id));
                    return childitems;
                }

                OPCBrowseClass.HandleNodesTreeViewAfterExpand(parentNode.Id);

                foreach (OPCNodeObject node in OPCBrowseClass.OpcNodes)
                {
                    if(node.NodeValue is not null)
                    {
                        childitems.Add(new TreeItemData($"{node.NodeName}", Icons.Filled.LocalOffer, node.NodeValue, node.Id));   
                    }
                    else
                    {
                        childitems.Add(new TreeItemData($"{node.NodeName}", Icons.Filled.Label, node.NodeValue, node.Id));
                    }                   
                }
                return childitems;

            }
            catch (Exception ex) 
            { 
                childitems.Add(new TreeItemData($"Initialization failed: {ex.ToString()}", Icons.Filled.AccessAlarm));
                return childitems;
            }           
        }

        else return parentNode.TreeItems;
    }

    public async Task TagSubcriptionData()
    {
        _processing = true;
        
        List<string> NodeIds = new List<string>();

        foreach(TreeItemData item in SelectedTags)
        {
            NodeIds.Add(item.Id);
        };

        if (!OPCBrowseClass.Subcribe(NodeIds))
        {
            Console.WriteLine("Error Occurred while trying to subscribe to the OPC Server Tag(s)");
        }
        else
        {
            await Task.Delay(2000);
        }
        _processing = false;
    }

    //private void PropertyHasChanged(object sender, PropertyChangedEventArgs args)
    //{
    //    tagRelay = OPCBrowseClass.SubscribeChanged;
    //    //StateHasChanged();
    //}
}